String archiveJarName="${project.name}-${project.version}.jar"
String archiveWarName="${project.name}-${project.version}.war"
String installDir=file("${project.buildDir}/install/${project.name}")

project.ext {
    def target = project.hasProperty('target') ? target : 'devel'
    targetConfiguration = configure(new Properties()) {
        put('jvm.options', '')                                  // empty default, so ReplaceTokens has something to work with
        put('target', target)
        jarname = archiveJarName
        warname = archiveWarName
        buildTimestamp = new Date().format("yyyy-MM-dd HH:mm:ss z")
        rootProjectDir = this.rootProject.projectDir.toString()
    }

    File cfgFile = file("${rootProject.projectDir}/${target}.properties")
    if (cfgFile.exists()) {
        cfgFile.withInputStream{
            targetConfiguration.load(it)
        }
    }
}

// We build a CopySpec for consistency
def jposCopySpec = copySpec {
    from(file("src/dist")) {
        exclude 'cfg/*.lmk'
        exclude 'cfg/*.jks'
        exclude 'cfg/*.ks'
        exclude '**/*.jpg'
        exclude '**/*.gif'
        exclude '**/*.png'
        exclude '**/*.pdf'
        exclude '**/*.ico'
        exclude '**/*.war'
        exclude '**/*.dat'
        exclude '**/*.ser'
        exclude '**/*.eot'
        exclude '**/*.svg'
        exclude '**/*.ttf'
        exclude '**/*.woff'
        exclude '**/*.woff2'
        filter(
            org.apache.tools.ant.filters.ReplaceTokens,
            tokens: targetConfiguration
        )
    }
    from(file("src/dist")) {
        include 'cfg/*.lmk'
        include 'cfg/*.jks'
        include 'cfg/*.ks'
        include '**/*.jpg'
        include '**/*.gif'
        include '**/*.png'
        include '**/*.pdf'
        include '**/*.ico'
        include '**/*.war'
        include '**/*.dat'
        include '**/*.ser'
        include '**/*.eot'
        include '**/*.svg'
        include '**/*.ttf'
        include '**/*.woff'
        include '**/*.woff2'
    }
    from(jar) {
        rename archiveJarName, "${targetConfiguration.jarname}"
    }
    into("lib") {
        from(configurations.runtimeClasspath) {
            exclude "servlet-api*.jar"    // dependency hack
        }
    }
    into("webapps") {
        from(file("build/libs")) {
            include '*.war'
        }
    }
}

// Create the jar's manifest
jar.manifest {
    attributes(
        'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Main-Class': 'org.jpos.q2.Q2',
        'Class-Path': configurations.runtimeClasspath.files.collect { "lib/" + it.getName() }.join(' ')
    )
}


processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        include '**/*.xml'
        include '**/*.cfg'
        include '**/*.asc'
        filter(
            org.apache.tools.ant.filters.ReplaceTokens,
            tokens: targetConfiguration
        )
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}


//--------------------------------------------------
// TASKS
//--------------------------------------------------

task version (type: JavaExec, dependsOn: classes) {
    description = "Shows jPOS Version"
    main = 'org.jpos.q2.Q2'
    args = ['--version']
    classpath configurations.runtimeClasspath
}

task dist(type: Tar) {
    description 'Creates tar distribution'
    into "$project.name-$archiveVersion"
    with jposCopySpec
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
}

task installApp(type: Sync) {
    description 'Installs jPOS based application'
    into { installDir }
    with jposCopySpec
}

task wrapper( type: Wrapper ) {
    description = "Generate gradlew[.bat]"
    gradleVersion = '6.0.1'
}

task installResources(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jpos.q2.install.Install'
    args = ["--outputDir=src/dist"]
}

task viewTests (description: 'Open Test Reports') {
    doLast {
        Class.forName("java.awt.Desktop").newInstance().browse(
            new File("${buildDir}/reports/tests/test", 'index.html').toURI())
    }
}

